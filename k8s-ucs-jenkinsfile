//Authored by Jeff Comer

def nodeLabel = 'pod-builder-agent'
pipeline {
  environment {
        BRANCH_NAME = "${GIT_BRANCH}"
        varPath = "vars/" + "${BRANCH_NAME}"
        APIC_CREDS = credentials('apic-creds')
        vcsaHostName = "vcsa-" + "${BRANCH_NAME}" + ".thor.iws.navy.mil"
        VCSA_CREDS = credentials('vcsa-creds')
        vcsaIpAddress = "172.16.14.137"
  }
  agent {
    kubernetes {
      yamlFile 'jnlp-ubuntu-tfe.yaml'
    }
  }
  
  stages{
    stage('Stat k8s Nodes') {
      steps {
        container('ubuntu-tfe') {
          //Check health state of k8s nodes in target cluster
          sh 'cp -r .kube /root/'
          sh 'python3 k8s/clusterHealth.py'
        }
      }
    }
    stage('Initiate Intersight IMC Device Claims') {
      steps {
        container('jnlp') {
          sh '''
          echo "Inbound Agent is Connected"
          '''
        }
        container('ubuntu-tfe') {
          //kick off terraform imc device discover for ucs hosts
          dir('tfe/intersight/hxDevClaim') {
            sh 'terraform init'
            sh 'terraform apply -auto-approve'
          }
          //Need add status checking to python script for status to replace sleep
          sh 'python3 intersight/intersightDevClaimStatus.py -u https://qa-intersight.thor.iws.navy.mil -i $varPath/imc/hostIpAddrs.csv'
          sh 'sleep 180'
          //Start bare metal esxi host installs
          build job: 'intersight-BareMetalInstall', propagate: true, wait: false
        }
      }
    }
    stage('Initiate Hyperflex Build') {
      steps {
        container('ubuntu-tfe') {
          //kick policy and profile create
          dir('tfe/intersight/hxEdgeBuild') {
            sh 'terraform init'
            sh 'terraform apply -var-file=dev.tfvars -auto-approve'
          }
          sh 'python3 intersight/intersightProfiles.py -u https://qa-intersight.thor.iws.navy.mil'
        }
      }
    } 
    stage('Config IMC vnics for VPC') {
      steps {
        container('ubuntu-tfe') {
          //Re-enable fabric ports and config imc for vpc ports and vnics
          sh 'python3 aci/aciHxVpcOps.py -u $APIC_CREDS_USR -p $APIC_CREDS_PSW -i 172.20.104.7 -f $varPath/aci/port-defs.csv -a noshut'
          sh 'python3 imc/imcVnicCreate.py -u $APIC_CREDS_USR -p $APIC_CREDS_PSW -i $varPath/imc/hostIpAddrs.csv'
          sh 'python3 imc/imcServerPowerCycle.py -u $APIC_CREDS_USR -p $APIC_CREDS_PSW -i $varPath/imc/hostIpAddrs.csv'
          //need code here to check esxi http status 200 instead of sleeping
          sh 'sleep 900'
        }
      }
    }
    stage('Create HX DataStore') {
      steps {
        container('ubuntu-tfe') {
          //Create HX DataStore from json template file
          sh 'python3 hyperflex/hx-createdatastore.py -u $APIC_CREDS_USR -p $APIC_CREDS_PSW -i $varPath/hyperflex/hx-ctrlvm.csv'
          sh 'sleep 30'
        }
      }
    } 
    stage('Post-install tasks and DVS Configs') {
      steps {
        container('ubuntu-tfe') {
          //add vmkernel addrs for vmotion and add hosts and vnics to DVS
          ansiblePlaybook(
              playbook: './vmware/hxHosts-vcenter-tasks.yml',
              inventory: 'localhost',
              extraVars: [
                  vcsa_ipAddress: "$vcsaIpAddress",
                  datacenter_name: "${BRANCH_NAME}",
                  cluster_name: "${BRANCH_NAME}",
                  vcsa_user: "administrator@vsphere.local",
                  vcsa_pwd: "$VCSA_CREDS_PSW"
              ],
              colorized: true
          )
        }
      }
    }
    stage('Deploy Ubuntu Cloud Init VMs for test') {
      steps {
        container('jnlp') {
          sh '''
          echo "Inbound Agent is Connected"
          '''
        }
        container('ubuntu-runner') {
          ansiblePlaybook(
              playbook: './vmware/ubuntuTmplCreate.yml',
              inventory: 'localhost',
              colorized: true
          )
        }
      }
    }
  }
}