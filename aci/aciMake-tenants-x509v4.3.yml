---
# Jeff Comer
# Ansible Playbook to add hosts to vcenter and attach nic's to a DVS
# example seed file vars/<branch>/tenants.yaml which was created using create_yaml_from_csv_v4.3.py

- name: CREATE ACI TENANTS
  hosts: apic
  connection: local
  gather_facts: False

  tasks:
    - name: TASK 01 - ENSURE TENANT EXISTS
      aci_tenant:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        state: "present"
        validate_certs: False
        tenant: "{{ item.tenant }}"
      with_items: "{{ tenants }}"
      tags: tenant

    - name: TASK 02 - ENSURE TENANT VRFs EXIST
      aci_vrf:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ item.tenant }}"
        vrf: "{{ item.vrf }}"
#        descr: "VRF Created Using Ansible"
      with_items: "{{ vrfs }}"
      tags: vrf

    - name: TASK 02a - Create IGMP Snoop Policy
      aci_rest:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        path: /api/mo/uni.json
        method: post
        content:
          {
            "igmpSnoopPol": {
              "attributes": {
                "adminSt": "enabled",
                "annotation": "",
                "ctrl": "",
                "descr": "",
                "dn": "uni/tn-{{ item.tenant }}/snPol-default",
                "lastMbrIntvl": "1",
                "name": "default",
                "nameAlias": "",
                "ownerKey": "",
                "ownerTag": "",
                "queryIntvl": "125",
                "rspIntvl": "10",
                "startQueryCnt": "2",
                "startQueryIntvl": "31"
              }
            }
          }
      with_items: "{{ tenants }}"
      delegate_to: localhost
      tags: igmp

    - name: TASK 02b - VRF Multicast Config
      aci_rest:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        path: /api/mo/uni.json
        method: post
        content:
          {
            "fvCtx": {
              "attributes": {
                "bdEnforcedEnable": "no",
                "descr": "VRF Created Using Ansible",
                "dn": "uni/tn-{{ item.tenant }}/ctx-{{ item.vrf }}",
                "ipDataPlaneLearning": "enabled",
                "knwMcastAct": "permit",
                "name": "{{ item.vrf }}",
                "pcEnfDir": "ingress",
                "pcEnfPref": "enforced"
              },
              "children": [
                {
                  "pimCtxP": {
                    "attributes": {
                      "mtu": "1500"
                    },
                    "children": [
                      {
                        "pimFabricRPPol": {
                          "attributes": {
                            "descr": ""
                          },
                          "children": [
                             {
                              "pimStaticRPEntryPol": {
                                "attributes": {
                                  "rpIp": "{{ item.rp }}"
                                }
                              }
                             }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
      when: (item.rp != "NA")
      with_items: "{{ vrfs }}"

    - name: TASK 03 - ENSURE TENANT BRIDGE DOMAINS EXIST
      aci_bd:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ item.tenant }}"
        bd: "{{ item.bd | default('prod_bd') }}"
        vrf: "{{ item.vrf }}"
        arp_flooding: "yes"
        l2_unknown_unicast: "flood"
        enable_multicast: "yes"
        igmp_snoop_policy: "default"
        endpoint_move_detect: "garp"
      with_items: "{{ bridge_domains }}"
      tags: bd

    - name: TASK 04 - ENSURE BRIDGE DOMAINS HAVE SUBNETS
      aci_bd_subnet:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        bd: "{{ item.bd }}"
        gateway: "{{ item.gateway }}"
        mask: "{{ item.mask }}"
        scope: "{{ item.scope }}"
      with_items: "{{ bridge_domains }}"

    - name: TASK 04a - Add L3 Out for BD if applicable
      aci_bd_to_l3out:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        bd: "{{ item.bd }}"
        l3out: "{{ item.L3Out }}"
      when: (item.L3Out != "NA")
      with_items: "{{ bridge_domains }}"

    - name: TASK 05 - ENSURE TENANT FILTERS EXIST
      aci_filter:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        filter: "{{ item.filter }}"
#        descr: "Filter Created Using Ansible"
      with_items: "{{ filters }}"
      tags: filter, contract

    - name: TASK 06 - ENSURE FILTERS HAVE FILTER ENTRIES
      aci_filter_entry:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        state: "present"
        validate_certs: False
        tenant: "{{ item.tenant }}"
        filter: "{{ item.filter }}"
        entry: "{{ item.entry }}"
        ether_type: "unspecified"
      with_items: "{{ filters }}"
      tags: filter, contract

    - name: TASK 07 - ENSURE TENANT CONTRACTS EXIST
      aci_contract:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        contract: "{{ item.contract }}"
        scope: "global"
#        description: "Contract Created Using Ansible"
      with_items: "{{ contracts }}"
      tags: contract

    - name: TASK 08 - ENSURE CONTRACTS HAVE CONTRACT SUBJECTS
      aci_contract_subject:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        contract: "{{ item.contract }}"
        subject: "{{ item.subject }}"
      with_items: "{{ contracts }}"
      tags: contract

    - name: TASK 09 - ENSURE CONTRACT SUBJECTS HAVE FILTERS
      aci_contract_subject_to_filter:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        contract: "{{ item.contract }}"
        subject: "{{ item.subject }}"
        filter: "{{ item.filter }}"
      with_items: "{{ contracts }}"
      tags: contract

    - name: TASK 10 - ENSURE APPLICATION EXISTS
      aci_ap:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        ap: "{{ item.ap }}"
#        descr: "App Profile Created Using Ansible"
      with_items: "{{ aps }}"
      tags: app, epg

    - name: TASK 11 - ENSURE APPLICATION EPGS EXISTS
      aci_epg:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        ap: "{{ item.ap }}"
        epg: "{{ item.epg }}"
        bd: "{{ item.bd }}"
        descr: "{{ item.description }}"
      with_items: "{{ epgs }}"
      tags: epg

    - name: TASK 11a - Create EPG Subnet
      aci_rest:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        path: /api/mo/uni.json
        method: post
        content:
          {
            "fvSubnet": {
              "attributes": {
                "annotation": "",
                "ctrl": "",
                "descr": "",
                "dn": "uni/tn-{{ item.tenant }}/ap-{{ item.ap }}/epg-{{ item.epg }}/subnet-[{{ item.gateway }}/{{ item.mask }}]",
                "ip": "{{ item.gateway }}/{{ item.mask }}",
                "preferred": "no",
                "scope": "public,shared",
                "virtual": "no"
               }
            }
          }
      when: (item.multivrf != "NA")
      with_items: "{{ epgs }}"
      delegate_to: localhost
      tags: epg


    - name: TASK 12a - ENSURE DOMAIN IS BOUND TO EPG
      aci_epg_to_domain:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        ap: "{{ item.ap }}"
        epg: "{{ item.epg }}"
        domain: "{{ item.domain }}"
        domain_type: "{{ item.domainType }}"
      when: (item.domainType != "vmm")
      with_items: "{{ epgs }}"
      tags: epg

    - name: TASK 12b - ENSURE DOMAIN IS BOUND TO EPG
      aci_epg_to_domain:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        ap: "{{ item.ap }}"
        epg: "{{ item.epg }}"
        domain: "{{ item.domain }}"
        domain_type: "{{ item.domainType }}"
        vm_provider: "vmware"
        deploy_immediacy: "immediate"
        resolution_immediacy: "pre-provision"
        encap_mode: "vlan"
        encap: "{{ item.encaps }}"
      when: (item.encaptype == "vlan" and item.domainType == "vmm")
      with_items: "{{ epgs }}"
      tags: epg

    - name: TASK 12c - ENSURE DOMAIN IS BOUND TO EPG
      aci_epg_to_domain:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        ap: "{{ item.ap }}"
        epg: "{{ item.epg }}"
        domain: "{{ item.domain }}"
        domain_type: "{{ item.domainType }}"
        vm_provider: "vmware"
        resolution_immediacy: "immediate"
        encap_mode: "auto"
      when: (item.encaptype == "auto" and item.domainType == "vmm")
      with_items: "{{ epgs }}"
      tags: epg

    - name: TASK 13 - ENSURE EPGS HAVE CONTRACTS
      aci_epg_to_contract:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        state: "present"
        tenant: "{{ item.tenant }}"
        ap: "{{ item.ap }}"
        epg: "{{ item.epg }}"
        contract: "{{ item.contract }}"
        contract_type: "{{ item.contract_type }}"
      with_items: "{{ epg_contracts }}"
      tags: epg

    - name: TASK 14 - Attach LAG Policy to EPG
      aci_rest:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        private_key: ../creds/ansible.key
        #password: "{{ password }}"
        validate_certs: False
        path: /api/mo/uni.json
        method: post
        content:
          {
            "fvRsDomAtt": {
              "attributes": {
                "annotation": "",
                "resImedcy": "immediate",
                "dn": "uni/tn-{{ item.tenant }}/ap-{{ item.ap }}/epg-{{ item.epg }}/rsdomAtt-[uni/vmmp-VMware/dom-{{ item.domain }}]",
                "lagPolicyName": "{{ item.domain }}-lacp",
                "tDn": "uni/vmmp-VMware/dom-{{ item.domain }}"
               },
              "children": [
                {
                  "fvAEPgLagPolAtt": {
                    "attributes": {
                      "annotation": "",
                      "userdom": ":all:common:"
                    },
                    "children": [
                      {
                        "fvRsVmmVSwitchEnhancedLagPol": {
                          "attributes": {
                            "annotation": "",
                            "tDn": "uni/vmmp-VMware/dom-{{ item.domain }}/vswitchpolcont/enlacplagp-{{ item.domain }}-lacp",
                            "userdom": ":all:common:"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
      when: (item.domainType == "vmm")
      with_items: "{{ epgs }}"
      tags: lacp
